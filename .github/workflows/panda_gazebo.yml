# Main Panda-gazebo github action. Performs linting and formatting checks. It also runs tests.
name: Panda-gazebo CI
on:
  push:
    branches:
      - noetic
  pull_request:
jobs:
  spell-check:
    name: runner / misspell
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: reviewdog/action-misspell@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-check
          level: warning
  alex: # Checks docs for inconsiderate writing
    name: runner / alex
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: reviewdog/action-alex@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-check
          level: warning
  # NOTE: The jobs below are disabled since we now use husky to perform these as pre-commit actions.
  # markdown-lint: # Lints the markdown code
  #   name: runner / remark-lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout mlc repository
  #       uses: actions/checkout@v2
  #     - name: Check markdown code quality using remark-lint
  #       uses: reviewdog/action-remark-lint@v2
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         reporter: github-check
  #         level: warning
  # black: # Check python code format
  #   name: runner / black
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: reviewdog/action-black@v2
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         reporter: github-check
  #         level: warning
  # flake8: # Lints python code
  #   name: runner / flake8
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout mlc repository
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: recursive
  #         token: ${{ secrets.GA_SUB }}
  #     - name: Set up Python environment
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7
  #     - name: Cache python environment
  #       uses: actions/cache@v2
  #       id: cache-python-env
  #       with:
  #         path: ${{ env.pythonLocation }}
  #         key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('setup.cfg') }}-${{ hashFiles('pyproject.toml') }}
  #     - name: Update pip
  #       run: |
  #         python -m pip install --upgrade pip
  #     - name: Install the mlc package with its dependencies
  #       if: steps.cache-python-env.outputs.cache-hit != 'true'
  #       run: |
  #         pip install -e .[dev]
  #     - name: flake8 Lint
  #       uses: reviewdog/action-flake8@v3
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         reporter: github-check
  #         level: warning
  # python-tests:
  #   name: python-tests (Testing)
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false # Run all matrix jobs
  #     matrix:
  #       python-version: [3.6, 3.7, 3.8] # Supported python versions
  #   steps:
  #     - name: Checkout mlc repository
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: recursive
  #         token: ${{ secrets.GA_SUB }}
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Cache python environment
  #       uses: actions/cache@v2
  #       id: cache-python-env
  #       with:
  #         path: ${{ env.pythonLocation }}
  #         key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('setup.cfg') }}-${{ hashFiles('pyproject.toml') }}
  #     - name: Update pip
  #       if: steps.cache-python-env.outputs.cache-hit != 'true'
  #       run: |
  #         python -m pip install --upgrade pip
  #     - name: Install the mlc package with its dependencies
  #       if: steps.cache-python-env.outputs.cache-hit != 'true'
  #       run: |
  #         pip install -e .[dev]
  #     - name: Test with Pytest
  #       run: |
  #         set -o pipefail
  #         pytest --cache-clear --html=pytest/${{ matrix.python-version }}/html/results.html --junitxml=pytest/${{ matrix.python-version }}/xml/results.xml --cov --cov-report=html:pytest/${{ matrix.python-version }}/cov/pytest-coverage.txt --cov-report=term-missing | tee pytest-coverage.txt
  #         set +o pipefail
  #     - name: Upload Pytest test results to artifacts
  #       uses: actions/upload-artifact@v2
  #       if: always()
  #       with:
  #         name: pytest-results-${{ matrix.python-version }}
  #         path: pytest/
  #     - name: Comment coverage
  #       uses: coroo/pytest-coverage-commentator@v1.0.2
  #       if: always() && github.event_name == 'pull_request'
  #       with:
  #         pytest-coverage: pytest-coverage.txt
